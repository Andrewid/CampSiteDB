

select * from campgrounds;
select * from campsites;
select * from reservations;
--select * from addresses;
--select * from users;
--select * from amenity;
--select * from campground_amenity;
--select * from campsite_amenity;

--query 1
SELECT
	cg.CampgroundName, cs.CampSiteID, STUFF((SELECT ', ' + Am.AmenityName 
          FROM CampSite_Amenity A1 INNER JOIN Amenity am
			ON A1.AmenityID_PKFK = am.AmenityID
          WHERE A1.CampSiteID_PKFK = MIN(csa.CampSiteID_PKFK)
          ORDER BY AmenityName
          FOR XML PATH('')),1,1,'') AS 'Amendities', 
	MIN(CONCAT('All dates available besides: ', r.CheckIn_Date, ' to ',r.CheckOut_Date,
		'; ' ,r1.CheckIn_Date, ' to ',r1.CheckOut_Date,
		'; and ',r2.CheckIn_Date, ' to ',r2.CheckOut_Date )) AS 'Availability'
FROM 
	CampSites cs INNER JOIN CampGrounds cg
		ON cs.CampgroundID = cg.CampgroundID INNER JOIN Reservations r
		ON r.CampsiteID = cs.CampSiteID INNER JOIN CampSite_Amenity csa
		ON cs.CampSiteID = csa.CampSiteID_PKFK INNER JOIN Amenity a
		ON csa.AmenityID_PKFK = a.AmenityID LEFT JOIN Reservations r1
		ON r.CheckIn_Date != r1.CheckIn_Date LEFT JOIN Reservations r2
		ON r1.CheckIn_Date != r2.CheckIn_Date AND r.CheckIn_Date != r2.CheckIn_Date
WHERE cg.CampgroundID = 1
GROUP BY cg.CampgroundName, cs.CampSiteID

--query2		   
DECLARE @RangeTill date = '2018-8-13'
DECLARE @RangeFrom date = '2018-7-12'

SELECT 
	cg.CampgroundID, cs.CampSiteID, 
	CASE WHEN MAX(DATEDIFF(day,@RangeTill,CheckOut_Date)) >= 1 AND MAX(DATEDIFF(day,CheckIn_Date,@RangeFrom)) >= 1
	THEN CONCAT((SUM(DATEDIFF(day,CheckIn_Date,CheckOut_Date)) - MAX(DATEDIFF(day,CheckIn_Date,@RangeFrom)) - MAX(DATEDIFF(day,@RangeTill,CheckOut_Date))) * 100 
			/ DATEDIFF(day,@RangeFrom,@RangeTill),'%')
	WHEN MAX(DATEDIFF(day,CheckIn_Date,@RangeFrom)) >= 1
	THEN CONCAT((SUM(DATEDIFF(day,CheckIn_Date,CheckOut_Date)) - MAX(DATEDIFF(day,CheckIn_Date,@RangeFrom))) * 100 
			/ DATEDIFF(day,@RangeFrom,@RangeTill),'%')
	WHEN MAX(DATEDIFF(day,@RangeTill,CheckOut_Date)) >= 1
	THEN CONCAT((SUM(DATEDIFF(day,CheckIn_Date,CheckOut_Date)) - MAX(DATEDIFF(day,@RangeTill,CheckOut_Date))) * 100 
			/ DATEDIFF(day,@RangeFrom,@RangeTill),'%')
	ELSE CONCAT(SUM(DATEDIFF(day,CheckIn_Date,CheckOut_Date)) * 100 / DATEDIFF(day,@RangeFrom,@RangeTill),'%') END AS 'Utility'
FROM 
	CampSites cs INNER JOIN CampGrounds cg
		ON cs.CampgroundID = cg.CampgroundID INNER JOIN Reservations r
		ON r.CampsiteID = cs.CampSiteID
WHERE
	NOT(r.CheckIn_Date > @RangeTill OR CheckOut_Date < @RangeFrom)
		AND cg.CampgroundID = 1 
GROUP BY cg.CampgroundID, cs.CampsiteID


-- Write a query that shows the revenue generated by each campground, broken out by month for June, July, August, and September.



SELECT 
	CampgroundName, 
	JUNE,
	JULY,
	AUGUST,
	SEPTEMBER,
	OCTOBER

FROM
	(
		
		SELECT 
			CampgroundName,
			MONTH,
			SUM(Invoice_Total) AS MONTHLY_TOTAL
		FROM
		(

		
			SELECT 
				CG.CampgroundName,
				--CheckIn_Date,
				--CheckOut_Date,
				CASE 
					WHEN MONTH(CheckIn_Date) = 6 THEN 'JUNE'
					WHEN MONTH(CheckIn_Date) = 7 THEN 'JULY'
					WHEN MONTH(CheckIn_Date) = 8 THEN 'AUGUST'
					WHEN MONTH(CheckIn_Date) = 9 THEN 'SEPTEMBER'
					WHEN MONTH(CheckIn_Date) = 10 THEN 'OCTOBER'
				END AS MONTH,
				Invoice_Total
			FROM
				CampGrounds CG
				INNER JOIN CampSites CS ON CG.CampgroundID = CS.CampgroundID
				INNER JOIN Reservations RES ON CS.CampSiteID = RES.CampsiteID
			) AS REVENUE_BY_MONTH
		GROUP BY CampgroundName, MONTH
	
	) AS Revenue_Table

PIVOT
	(

		SUM(MONTHLY_TOTAL)
		FOR MONTH
		IN (JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER)

	) AS Revenue_Pivot
